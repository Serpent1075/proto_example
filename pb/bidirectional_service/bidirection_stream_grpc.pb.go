// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.20.3
// source: bidirection_stream/bidirection_stream.proto

package bidirectional_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BidirectionalService_BidirectionalStreamingCall_FullMethodName = "/bidirection_stream.BidirectionalService/BidirectionalStreamingCall"
)

// BidirectionalServiceClient is the client API for BidirectionalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BidirectionalServiceClient interface {
	// Bidirectional streaming RPC: 클라이언트와 서버가 모두 여러 메시지를 스트림으로 주고받습니다.
	BidirectionalStreamingCall(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[StreamingRequest, StreamingResponse], error)
}

type bidirectionalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBidirectionalServiceClient(cc grpc.ClientConnInterface) BidirectionalServiceClient {
	return &bidirectionalServiceClient{cc}
}

func (c *bidirectionalServiceClient) BidirectionalStreamingCall(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[StreamingRequest, StreamingResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &BidirectionalService_ServiceDesc.Streams[0], BidirectionalService_BidirectionalStreamingCall_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamingRequest, StreamingResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BidirectionalService_BidirectionalStreamingCallClient = grpc.BidiStreamingClient[StreamingRequest, StreamingResponse]

// BidirectionalServiceServer is the server API for BidirectionalService service.
// All implementations must embed UnimplementedBidirectionalServiceServer
// for forward compatibility.
type BidirectionalServiceServer interface {
	// Bidirectional streaming RPC: 클라이언트와 서버가 모두 여러 메시지를 스트림으로 주고받습니다.
	BidirectionalStreamingCall(grpc.BidiStreamingServer[StreamingRequest, StreamingResponse]) error
	mustEmbedUnimplementedBidirectionalServiceServer()
}

// UnimplementedBidirectionalServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBidirectionalServiceServer struct{}

func (UnimplementedBidirectionalServiceServer) BidirectionalStreamingCall(grpc.BidiStreamingServer[StreamingRequest, StreamingResponse]) error {
	return status.Errorf(codes.Unimplemented, "method BidirectionalStreamingCall not implemented")
}
func (UnimplementedBidirectionalServiceServer) mustEmbedUnimplementedBidirectionalServiceServer() {}
func (UnimplementedBidirectionalServiceServer) testEmbeddedByValue()                              {}

// UnsafeBidirectionalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BidirectionalServiceServer will
// result in compilation errors.
type UnsafeBidirectionalServiceServer interface {
	mustEmbedUnimplementedBidirectionalServiceServer()
}

func RegisterBidirectionalServiceServer(s grpc.ServiceRegistrar, srv BidirectionalServiceServer) {
	// If the following call pancis, it indicates UnimplementedBidirectionalServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BidirectionalService_ServiceDesc, srv)
}

func _BidirectionalService_BidirectionalStreamingCall_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BidirectionalServiceServer).BidirectionalStreamingCall(&grpc.GenericServerStream[StreamingRequest, StreamingResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BidirectionalService_BidirectionalStreamingCallServer = grpc.BidiStreamingServer[StreamingRequest, StreamingResponse]

// BidirectionalService_ServiceDesc is the grpc.ServiceDesc for BidirectionalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BidirectionalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bidirection_stream.BidirectionalService",
	HandlerType: (*BidirectionalServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "BidirectionalStreamingCall",
			Handler:       _BidirectionalService_BidirectionalStreamingCall_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "bidirection_stream/bidirection_stream.proto",
}
