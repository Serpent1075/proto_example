// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.20.3
// source: bidirectionrpc/bidirectionrpc.proto

package bidirectionrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BidirectionService_BidirectionStreamingCall_FullMethodName = "/bidirectionrpc.BidirectionService/BidirectionStreamingCall"
)

// BidirectionServiceClient is the client API for BidirectionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BidirectionServiceClient interface {
	// Bidirectional streaming RPC: 클라이언트와 서버가 모두 여러 메시지를 스트림으로 주고받습니다.
	BidirectionStreamingCall(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[StreamingRequest, StreamingResponse], error)
}

type bidirectionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBidirectionServiceClient(cc grpc.ClientConnInterface) BidirectionServiceClient {
	return &bidirectionServiceClient{cc}
}

func (c *bidirectionServiceClient) BidirectionStreamingCall(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[StreamingRequest, StreamingResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &BidirectionService_ServiceDesc.Streams[0], BidirectionService_BidirectionStreamingCall_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamingRequest, StreamingResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BidirectionService_BidirectionStreamingCallClient = grpc.BidiStreamingClient[StreamingRequest, StreamingResponse]

// BidirectionServiceServer is the server API for BidirectionService service.
// All implementations must embed UnimplementedBidirectionServiceServer
// for forward compatibility.
type BidirectionServiceServer interface {
	// Bidirectional streaming RPC: 클라이언트와 서버가 모두 여러 메시지를 스트림으로 주고받습니다.
	BidirectionStreamingCall(grpc.BidiStreamingServer[StreamingRequest, StreamingResponse]) error
	mustEmbedUnimplementedBidirectionServiceServer()
}

// UnimplementedBidirectionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBidirectionServiceServer struct{}

func (UnimplementedBidirectionServiceServer) BidirectionStreamingCall(grpc.BidiStreamingServer[StreamingRequest, StreamingResponse]) error {
	return status.Errorf(codes.Unimplemented, "method BidirectionStreamingCall not implemented")
}
func (UnimplementedBidirectionServiceServer) mustEmbedUnimplementedBidirectionServiceServer() {}
func (UnimplementedBidirectionServiceServer) testEmbeddedByValue()                            {}

// UnsafeBidirectionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BidirectionServiceServer will
// result in compilation errors.
type UnsafeBidirectionServiceServer interface {
	mustEmbedUnimplementedBidirectionServiceServer()
}

func RegisterBidirectionServiceServer(s grpc.ServiceRegistrar, srv BidirectionServiceServer) {
	// If the following call pancis, it indicates UnimplementedBidirectionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BidirectionService_ServiceDesc, srv)
}

func _BidirectionService_BidirectionStreamingCall_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BidirectionServiceServer).BidirectionStreamingCall(&grpc.GenericServerStream[StreamingRequest, StreamingResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BidirectionService_BidirectionStreamingCallServer = grpc.BidiStreamingServer[StreamingRequest, StreamingResponse]

// BidirectionService_ServiceDesc is the grpc.ServiceDesc for BidirectionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BidirectionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bidirectionrpc.BidirectionService",
	HandlerType: (*BidirectionServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "BidirectionStreamingCall",
			Handler:       _BidirectionService_BidirectionStreamingCall_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "bidirectionrpc/bidirectionrpc.proto",
}
