// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.20.3
// source: integratedrpc/integratedrpc.proto

package integratedrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	IntUnaryService_UnaryCall_FullMethodName = "/integratedrpc.IntUnaryService/UnaryCall"
)

// IntUnaryServiceClient is the client API for IntUnaryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IntUnaryServiceClient interface {
	// Unary RPC: 클라이언트가 단일 요청을 보내고 서버가 단일 응답을 반환합니다.
	UnaryCall(ctx context.Context, in *UnaryRequest, opts ...grpc.CallOption) (*UnaryResponse, error)
}

type intUnaryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIntUnaryServiceClient(cc grpc.ClientConnInterface) IntUnaryServiceClient {
	return &intUnaryServiceClient{cc}
}

func (c *intUnaryServiceClient) UnaryCall(ctx context.Context, in *UnaryRequest, opts ...grpc.CallOption) (*UnaryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnaryResponse)
	err := c.cc.Invoke(ctx, IntUnaryService_UnaryCall_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IntUnaryServiceServer is the server API for IntUnaryService service.
// All implementations must embed UnimplementedIntUnaryServiceServer
// for forward compatibility.
type IntUnaryServiceServer interface {
	// Unary RPC: 클라이언트가 단일 요청을 보내고 서버가 단일 응답을 반환합니다.
	UnaryCall(context.Context, *UnaryRequest) (*UnaryResponse, error)
	mustEmbedUnimplementedIntUnaryServiceServer()
}

// UnimplementedIntUnaryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedIntUnaryServiceServer struct{}

func (UnimplementedIntUnaryServiceServer) UnaryCall(context.Context, *UnaryRequest) (*UnaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnaryCall not implemented")
}
func (UnimplementedIntUnaryServiceServer) mustEmbedUnimplementedIntUnaryServiceServer() {}
func (UnimplementedIntUnaryServiceServer) testEmbeddedByValue()                         {}

// UnsafeIntUnaryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IntUnaryServiceServer will
// result in compilation errors.
type UnsafeIntUnaryServiceServer interface {
	mustEmbedUnimplementedIntUnaryServiceServer()
}

func RegisterIntUnaryServiceServer(s grpc.ServiceRegistrar, srv IntUnaryServiceServer) {
	// If the following call pancis, it indicates UnimplementedIntUnaryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&IntUnaryService_ServiceDesc, srv)
}

func _IntUnaryService_UnaryCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntUnaryServiceServer).UnaryCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntUnaryService_UnaryCall_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntUnaryServiceServer).UnaryCall(ctx, req.(*UnaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IntUnaryService_ServiceDesc is the grpc.ServiceDesc for IntUnaryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IntUnaryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "integratedrpc.IntUnaryService",
	HandlerType: (*IntUnaryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UnaryCall",
			Handler:    _IntUnaryService_UnaryCall_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "integratedrpc/integratedrpc.proto",
}

const (
	IntClientService_ClientStreamingCall_FullMethodName = "/integratedrpc.IntClientService/ClientStreamingCall"
)

// IntClientServiceClient is the client API for IntClientService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IntClientServiceClient interface {
	// Client streaming RPC: 클라이언트가 여러 요청을 스트림으로 보내고 서버가 단일 응답을 반환합니다.
	ClientStreamingCall(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[StreamingRequest, StreamingResponse], error)
}

type intClientServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIntClientServiceClient(cc grpc.ClientConnInterface) IntClientServiceClient {
	return &intClientServiceClient{cc}
}

func (c *intClientServiceClient) ClientStreamingCall(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[StreamingRequest, StreamingResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &IntClientService_ServiceDesc.Streams[0], IntClientService_ClientStreamingCall_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamingRequest, StreamingResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type IntClientService_ClientStreamingCallClient = grpc.ClientStreamingClient[StreamingRequest, StreamingResponse]

// IntClientServiceServer is the server API for IntClientService service.
// All implementations must embed UnimplementedIntClientServiceServer
// for forward compatibility.
type IntClientServiceServer interface {
	// Client streaming RPC: 클라이언트가 여러 요청을 스트림으로 보내고 서버가 단일 응답을 반환합니다.
	ClientStreamingCall(grpc.ClientStreamingServer[StreamingRequest, StreamingResponse]) error
	mustEmbedUnimplementedIntClientServiceServer()
}

// UnimplementedIntClientServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedIntClientServiceServer struct{}

func (UnimplementedIntClientServiceServer) ClientStreamingCall(grpc.ClientStreamingServer[StreamingRequest, StreamingResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ClientStreamingCall not implemented")
}
func (UnimplementedIntClientServiceServer) mustEmbedUnimplementedIntClientServiceServer() {}
func (UnimplementedIntClientServiceServer) testEmbeddedByValue()                          {}

// UnsafeIntClientServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IntClientServiceServer will
// result in compilation errors.
type UnsafeIntClientServiceServer interface {
	mustEmbedUnimplementedIntClientServiceServer()
}

func RegisterIntClientServiceServer(s grpc.ServiceRegistrar, srv IntClientServiceServer) {
	// If the following call pancis, it indicates UnimplementedIntClientServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&IntClientService_ServiceDesc, srv)
}

func _IntClientService_ClientStreamingCall_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(IntClientServiceServer).ClientStreamingCall(&grpc.GenericServerStream[StreamingRequest, StreamingResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type IntClientService_ClientStreamingCallServer = grpc.ClientStreamingServer[StreamingRequest, StreamingResponse]

// IntClientService_ServiceDesc is the grpc.ServiceDesc for IntClientService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IntClientService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "integratedrpc.IntClientService",
	HandlerType: (*IntClientServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ClientStreamingCall",
			Handler:       _IntClientService_ClientStreamingCall_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "integratedrpc/integratedrpc.proto",
}

const (
	IntServerService_ServerStreamingCall_FullMethodName = "/integratedrpc.IntServerService/ServerStreamingCall"
)

// IntServerServiceClient is the client API for IntServerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IntServerServiceClient interface {
	// Server streaming RPC: 클라이언트가 단일 요청을 보내고 서버가 여러 응답을 스트림으로 반환합니다.
	ServerStreamingCall(ctx context.Context, in *StreamingRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamingResponse], error)
}

type intServerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIntServerServiceClient(cc grpc.ClientConnInterface) IntServerServiceClient {
	return &intServerServiceClient{cc}
}

func (c *intServerServiceClient) ServerStreamingCall(ctx context.Context, in *StreamingRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamingResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &IntServerService_ServiceDesc.Streams[0], IntServerService_ServerStreamingCall_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamingRequest, StreamingResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type IntServerService_ServerStreamingCallClient = grpc.ServerStreamingClient[StreamingResponse]

// IntServerServiceServer is the server API for IntServerService service.
// All implementations must embed UnimplementedIntServerServiceServer
// for forward compatibility.
type IntServerServiceServer interface {
	// Server streaming RPC: 클라이언트가 단일 요청을 보내고 서버가 여러 응답을 스트림으로 반환합니다.
	ServerStreamingCall(*StreamingRequest, grpc.ServerStreamingServer[StreamingResponse]) error
	mustEmbedUnimplementedIntServerServiceServer()
}

// UnimplementedIntServerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedIntServerServiceServer struct{}

func (UnimplementedIntServerServiceServer) ServerStreamingCall(*StreamingRequest, grpc.ServerStreamingServer[StreamingResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ServerStreamingCall not implemented")
}
func (UnimplementedIntServerServiceServer) mustEmbedUnimplementedIntServerServiceServer() {}
func (UnimplementedIntServerServiceServer) testEmbeddedByValue()                          {}

// UnsafeIntServerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IntServerServiceServer will
// result in compilation errors.
type UnsafeIntServerServiceServer interface {
	mustEmbedUnimplementedIntServerServiceServer()
}

func RegisterIntServerServiceServer(s grpc.ServiceRegistrar, srv IntServerServiceServer) {
	// If the following call pancis, it indicates UnimplementedIntServerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&IntServerService_ServiceDesc, srv)
}

func _IntServerService_ServerStreamingCall_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamingRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(IntServerServiceServer).ServerStreamingCall(m, &grpc.GenericServerStream[StreamingRequest, StreamingResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type IntServerService_ServerStreamingCallServer = grpc.ServerStreamingServer[StreamingResponse]

// IntServerService_ServiceDesc is the grpc.ServiceDesc for IntServerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IntServerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "integratedrpc.IntServerService",
	HandlerType: (*IntServerServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ServerStreamingCall",
			Handler:       _IntServerService_ServerStreamingCall_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "integratedrpc/integratedrpc.proto",
}

const (
	IntBidirectionalService_BidirectionalStreamingCall_FullMethodName = "/integratedrpc.IntBidirectionalService/BidirectionalStreamingCall"
)

// IntBidirectionalServiceClient is the client API for IntBidirectionalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IntBidirectionalServiceClient interface {
	// Bidirectional streaming RPC: 클라이언트와 서버가 모두 여러 메시지를 스트림으로 주고받습니다.
	BidirectionalStreamingCall(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[StreamingRequest, StreamingResponse], error)
}

type intBidirectionalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIntBidirectionalServiceClient(cc grpc.ClientConnInterface) IntBidirectionalServiceClient {
	return &intBidirectionalServiceClient{cc}
}

func (c *intBidirectionalServiceClient) BidirectionalStreamingCall(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[StreamingRequest, StreamingResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &IntBidirectionalService_ServiceDesc.Streams[0], IntBidirectionalService_BidirectionalStreamingCall_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamingRequest, StreamingResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type IntBidirectionalService_BidirectionalStreamingCallClient = grpc.BidiStreamingClient[StreamingRequest, StreamingResponse]

// IntBidirectionalServiceServer is the server API for IntBidirectionalService service.
// All implementations must embed UnimplementedIntBidirectionalServiceServer
// for forward compatibility.
type IntBidirectionalServiceServer interface {
	// Bidirectional streaming RPC: 클라이언트와 서버가 모두 여러 메시지를 스트림으로 주고받습니다.
	BidirectionalStreamingCall(grpc.BidiStreamingServer[StreamingRequest, StreamingResponse]) error
	mustEmbedUnimplementedIntBidirectionalServiceServer()
}

// UnimplementedIntBidirectionalServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedIntBidirectionalServiceServer struct{}

func (UnimplementedIntBidirectionalServiceServer) BidirectionalStreamingCall(grpc.BidiStreamingServer[StreamingRequest, StreamingResponse]) error {
	return status.Errorf(codes.Unimplemented, "method BidirectionalStreamingCall not implemented")
}
func (UnimplementedIntBidirectionalServiceServer) mustEmbedUnimplementedIntBidirectionalServiceServer() {
}
func (UnimplementedIntBidirectionalServiceServer) testEmbeddedByValue() {}

// UnsafeIntBidirectionalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IntBidirectionalServiceServer will
// result in compilation errors.
type UnsafeIntBidirectionalServiceServer interface {
	mustEmbedUnimplementedIntBidirectionalServiceServer()
}

func RegisterIntBidirectionalServiceServer(s grpc.ServiceRegistrar, srv IntBidirectionalServiceServer) {
	// If the following call pancis, it indicates UnimplementedIntBidirectionalServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&IntBidirectionalService_ServiceDesc, srv)
}

func _IntBidirectionalService_BidirectionalStreamingCall_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(IntBidirectionalServiceServer).BidirectionalStreamingCall(&grpc.GenericServerStream[StreamingRequest, StreamingResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type IntBidirectionalService_BidirectionalStreamingCallServer = grpc.BidiStreamingServer[StreamingRequest, StreamingResponse]

// IntBidirectionalService_ServiceDesc is the grpc.ServiceDesc for IntBidirectionalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IntBidirectionalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "integratedrpc.IntBidirectionalService",
	HandlerType: (*IntBidirectionalServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "BidirectionalStreamingCall",
			Handler:       _IntBidirectionalService_BidirectionalStreamingCall_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "integratedrpc/integratedrpc.proto",
}
