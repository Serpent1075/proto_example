// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.20.3
// source: unary/unary.proto

package unary_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UnaryService_UnaryCall_FullMethodName = "/unary_service.UnaryService/UnaryCall"
)

// UnaryServiceClient is the client API for UnaryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UnaryServiceClient interface {
	// Unary RPC: 클라이언트가 단일 요청을 보내고 서버가 단일 응답을 반환합니다.
	UnaryCall(ctx context.Context, in *UnaryRequest, opts ...grpc.CallOption) (*UnaryResponse, error)
}

type unaryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUnaryServiceClient(cc grpc.ClientConnInterface) UnaryServiceClient {
	return &unaryServiceClient{cc}
}

func (c *unaryServiceClient) UnaryCall(ctx context.Context, in *UnaryRequest, opts ...grpc.CallOption) (*UnaryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnaryResponse)
	err := c.cc.Invoke(ctx, UnaryService_UnaryCall_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UnaryServiceServer is the server API for UnaryService service.
// All implementations must embed UnimplementedUnaryServiceServer
// for forward compatibility.
type UnaryServiceServer interface {
	// Unary RPC: 클라이언트가 단일 요청을 보내고 서버가 단일 응답을 반환합니다.
	UnaryCall(context.Context, *UnaryRequest) (*UnaryResponse, error)
	mustEmbedUnimplementedUnaryServiceServer()
}

// UnimplementedUnaryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUnaryServiceServer struct{}

func (UnimplementedUnaryServiceServer) UnaryCall(context.Context, *UnaryRequest) (*UnaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnaryCall not implemented")
}
func (UnimplementedUnaryServiceServer) mustEmbedUnimplementedUnaryServiceServer() {}
func (UnimplementedUnaryServiceServer) testEmbeddedByValue()                      {}

// UnsafeUnaryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UnaryServiceServer will
// result in compilation errors.
type UnsafeUnaryServiceServer interface {
	mustEmbedUnimplementedUnaryServiceServer()
}

func RegisterUnaryServiceServer(s grpc.ServiceRegistrar, srv UnaryServiceServer) {
	// If the following call pancis, it indicates UnimplementedUnaryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UnaryService_ServiceDesc, srv)
}

func _UnaryService_UnaryCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnaryServiceServer).UnaryCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UnaryService_UnaryCall_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnaryServiceServer).UnaryCall(ctx, req.(*UnaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UnaryService_ServiceDesc is the grpc.ServiceDesc for UnaryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UnaryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "unary_service.UnaryService",
	HandlerType: (*UnaryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UnaryCall",
			Handler:    _UnaryService_UnaryCall_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "unary/unary.proto",
}
